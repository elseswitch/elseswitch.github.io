<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://elseswitch.github.io/atom.xml" rel="self"/>
  <link href="http://elseswitch.github.io/"/>
  <updated>2015-01-01T11:09:26+08:00</updated>
  <id>http://elseswitch.github.io/</id>
  <author>
    <name><![CDATA[elseswitch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flashane的一点总结]]></title>
    <link href="http://elseswitch.github.io/blog/2015/01/01/Flashane%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <updated>2015-01-01T00:00:00+08:00</updated>
    <id>http://elseswitch.github.io/blog/2015/01/01/Flashane的一点总结</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;Flash ane的一点总结&rdquo;
date: 2015-01-01 10:04:43 +0800
comments: true
项目很多地方用到了ane,之前用的都是他们从网上找的现成的，只需要按照作者的说明添加到项目中就可以了。这次接平台支付，本来也打算直接用别人写好的ane,但中间遇到了很多问题，由于没法调试，很多问题只能靠猜或者一遍一遍的查各种资料。后来花时间研究下ane的制作，在后面接openIAB的时候帮助很大。可以debug代码与之前真是天壤之别。
ane制作看了很多资料，帮助最大的就是下面这两篇文章了：
<a href="http://tmtbe.blog.163.com/blog/static/3965819420144911379481/">http://tmtbe.blog.163.com/blog/static/3965819420144911379481/</a>
<a href="http://tmtbe.blog.163.com/blog/static/3965819420144128244510/">http://tmtbe.blog.163.com/blog/static/3965819420144128244510/</a>
详细教程也是文章中提供的一个链接：
<a href="http://www.adobe.com/cn/devnet/air/articles/ane-android-devices.html">http://www.adobe.com/cn/devnet/air/articles/ane-android-devices.html</a>
真心感谢他们。
另外还有一些需要注意的地方：</p>

<ul>
<li>JDK必须使用1.6.x的版本，如果使用1.7.x会出错。</li>
<li>打包用的flexsdk，参考adobe那篇教程设置的，没有实验过airsdk是否可行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openiab接入支付]]></title>
    <link href="http://elseswitch.github.io/blog/2014/12/31/OpenIAB%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98/"/>
    <updated>2014-12-31T00:00:00+08:00</updated>
    <id>http://elseswitch.github.io/blog/2014/12/31/OpenIAB接入支付</id>
    <content type="html"><![CDATA[<hr />

<p>终于做完了OpenIAB的支付的接入，目前已接googleplay,yandex,amazon这三个平台。期间碰到了各种问题。记录一下。非常感谢OpenIAB的作者。</p>

<h2>googleplay</h2>

<ul>
<li>必须连接VPN打开商店，必须在商店里可以看到收费应用。如果看不到可以清除一下缓存重新打开商店看看，但已不是每次都能成功。至今不知道google是如何认定你所在地区的。</li>
<li>不能使用debug版本测试正式商品的购买，只有google提供测试的那几个ID可以使用debug版本。否则会提示此版本应用不支持应用内购买。</li>
<li>使用debug版本的时候，无法从googleplay获取商品列表，后来发现是debug设置的包名与正式版不一致导致的。</li>
<li>googleplayV2版把所有的商品都是管理类商品，这意味着在控制台将物品类型设置为消耗类实际是无效的。我们游戏里只有一种类型的商品，就是消耗类的，购买流程是提交支付&ndash;支付成功&ndash;提交消耗-消耗成功-提交给web服务器，web服务器验证，提交给游戏服务器，游戏服务器添加游戏类对应商品。</li>
<li>在开发者控制台需要注意的地方，添加的商品必须为active状态；游戏必须提交到alpha test或者beta test,必须为publish状态不能是草稿状态；必须把测试帐号添加到设置里面的test account里。

<h2>yandex</h2></li>
<li>yandex和googleplay保持了完全一样的逻辑，googleplay接入成功后，yandex也会完全OK。yandex无需翻墙也让问题容易了很多。</li>
<li>手机上需要安装yandex.store.</li>
<li>开发者控制台需要添加测试帐号，添加测试商品，上传应用，无需publish即可测试支付。</li>
<li>安装的时候需要使用adb install -i com.yandex.store yourapk,以便openIAB选择正确的billingservice.

<h2>amazon</h2></li>
<li>amazon的支付和googleplay以及yandex有很大不同。首先添加商品的时候可以将物品设置为消耗类而且是有效的。amazon在购买成功后会自动将这种类型的商品消耗掉。不需要像上面两个store一样提交消耗请求。另外，amamon的测试环境都是在本地搭建的，手机端需要安装app tester,web端也需要搭建一个模拟测试环境。貌似只有本地支付测试通过然后publish才会通过amazon审核。</li>
<li>遇到一个地方坑了两天时间，在openIAB的官方wiki和amazon的官方文档中，均提到采用app sdk tester进行测试，但实际测试中发现获取到尚品列表，后来到amamzon开发论坛才找到如下解释。&#8221;Please uninstall the SDK tester from your device. Only Amazon App Tester Should be installed in the device when you are testing IAP V2 in sandbox in your app. Thanks. &ldquo;.</li>
<li>由于amazon的消耗类商品不需要提交消耗，所以客户端需要针对amazon的支付特殊处理，在支付成功后就可以提交web服务器了。</li>
</ul>


<p>总结下来，浪费很多时间主要是这几个原因：</p>

<ul>
<li>googleplay中国地区的不支持。花了很多时间处理连接问题。</li>
<li>我们游戏是采用flash air开发，都需要添加ane才能接入支付，开发调试ane都比较蛋疼。</li>
<li>首先要看官方的接入文档，然后再看其他总结，不然你会碰到各种坑。</li>
<li>英文不够好，很多问题都只有英文资料。有时候需要看很多遍才能理解，google翻译并不靠谱。</li>
</ul>

]]></content>
  </entry>
  
</feed>
